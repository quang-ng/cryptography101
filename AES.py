def add_round_key(state, round_key):
    """
    XORs each byte of the state with the corresponding byte from the round key.
    :param state: 4x4 matrix (list of lists) representing the AES state
    :param round_key: 4x4 matrix (list of lists) representing the round key
    :return: new 4x4 matrix after XOR with round key
    """
    return [[state[row][col] ^ round_key[row][col] for col in range(4)] for row in range(4)]

S_BOX = [
    # 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,  # 0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,  # 1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,  # 2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,  # 3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,  # 4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,  # 5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,  # 6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,  # 7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,  # 8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,  # 9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,  # A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,  # B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  # C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  # D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  # E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16   # F
]

def sub_bytes(state):
    """
    Apply the SubBytes step using the AES S-box to each byte in the state.
    
    :param state: 4x4 matrix of bytes
    :return: new state with each byte substituted via S-box
    """
    return [[S_BOX[byte] for byte in row] for row in state]

def shift_rows(state):
    """
    Perform AES ShiftRows on a 4x4 AES state (column-major format).
    
    The state is a list of 4 rows, each containing 4 bytes (state[row][col]).
    
    AES shifts:
    - Row 0: No shift
    - Row 1: Shift left by 1
    - Row 2: Shift left by 2
    - Row 3: Shift left by 3 (or right by 1)
    
    :param state: 4x4 list representing AES state (column-major)
    :return: shifted 4x4 state (new list)
    """
    return [
        state[0],                                 # Row 0: unchanged
        state[1][1:] + state[1][:1],              # Row 1: shift left by 1
        state[2][2:] + state[2][:2],              # Row 2: shift left by 2
        state[3][3:] + state[3][:3],              # Row 3: shift left by 3
    ]

# learned from http://cs.ucsb.edu/~koc/cs178/projects/JT/aes.c
xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)


def mix_single_column(a):
    # see Sec 4.1.2 in The Design of Rijndael
    t = a[0] ^ a[1] ^ a[2] ^ a[3]
    u = a[0]
    a[0] ^= t ^ xtime(a[0] ^ a[1])
    a[1] ^= t ^ xtime(a[1] ^ a[2])
    a[2] ^= t ^ xtime(a[2] ^ a[3])
    a[3] ^= t ^ xtime(a[3] ^ u)


def mix_columns(s):
    for i in range(4):
        mix_single_column(s[i])
    
    return s

Rcon = [
    0x00, 0x01, 0x02, 0x04, 0x08,
    0x10, 0x20, 0x40, 0x80,
    0x1B, 0x36
]

def sub_word(word):
    return [S_BOX[b] for b in word]

def rot_word(word):
    return word[1:] + word[:1]

def g(word, round_index):
    """
    g(w) = SubWord(RotWord(w)) ⊕ Rcon[round_index] applied to first byte
    """
    word = rot_word(word)
    word = sub_word(word)
    word[0] ^= Rcon[round_index]
    return word

def key_expansion_aes128(key):
    """
    AES-128 Key Expansion using W_{4i} = W_{4(i - 1)} ⊕ g(W_{4i - 1})
    Returns list of 44 words (each 4 bytes)
    """
    assert len(key) == 16
    W = []  # 4-byte words

    # Initial key: W[0] to W[3]
    for i in range(4):
        W.append(key[4*i : 4*(i+1)])

    # Generate W[4] to W[43]
    for i in range(1, 11):  # 10 rounds → i from 1 to 10
        base = 4 * i
        prev = 4 * (i - 1)
        W.append([a ^ b for a, b in zip(W[prev], g(W[base - 1], i))])      # W[4i]
        W.append([a ^ b for a, b in zip(W[base],     W[prev + 1])])        # W[4i+1]
        W.append([a ^ b for a, b in zip(W[base + 1], W[prev + 2])])        # W[4i+2]
        W.append([a ^ b for a, b in zip(W[base + 2], W[prev + 3])])        # W[4i+3]

    return W

def inv_mix_columns(s):
    # see Sec 4.1.3 in The Design of Rijndael
    for i in range(4):
        u = xtime(xtime(s[i][0] ^ s[i][2]))
        v = xtime(xtime(s[i][1] ^ s[i][3]))
        s[i][0] ^= u
        s[i][1] ^= v
        s[i][2] ^= u
        s[i][3] ^= v

    return mix_columns(s)


def inv_shift_rows(state):
    """
    Perform AES Inverse ShiftRows on a 4x4 AES state (column-major format).
    AES inverse shifts:
    - Row 0: No shift
    - Row 1: Shift right by 1
    - Row 2: Shift right by 2
    - Row 3: Shift right by 3 (or left by 1)
    :param state: 4x4 list representing AES state (column-major)
    :return: new state after inverse shift
    """
    return [
        state[0],                                 # Row 0: unchanged
        state[1][-1:] + state[1][:-1],            # Row 1: shift right by 1
        state[2][-2:] + state[2][:-2],            # Row 2: shift right by 2
        state[3][-3:] + state[3][:-3],            # Row 3: shift right by 3
    ]

# Inverse AES S-box (256 values)
inv_sbox = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,
    0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
    0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
    0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,
    0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,
    0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,
    0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
    0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,
    0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
    0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
    0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,
    0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
    0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
    0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,
    0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,
    0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
]

def inv_sub_bytes(state):
    """
    Apply Inverse SubBytes to the AES state using the inverse S-box.
    `state` is a 4x4 list of bytes (row x column).
    """
    for i in range(4):
        for j in range(4):
            state[i][j] = inv_sbox[state[i][j]]
    return state

# Encrypt one 16-byte block
def encrypt_block(block, rk):
    s = [[block[r + 4*c] for c in range(4)] for r in range(4)]
    s = add_round_key(s, rk[0:4])
    for rnd in range(1, 10):
        s = sub_bytes(s)
        s = shift_rows(s)
        s = mix_columns(s)
        s = add_round_key(s, rk[rnd*4:rnd*4+4])
    s = sub_bytes(s)
    s = shift_rows(s)
    s = add_round_key(s, rk[40:44])
    return [s[r][c] for c in range(4) for r in range(4)]

# Decrypt one 16-byte block
def decrypt_block(block, rk):
    s = [[block[r + 4*c] for c in range(4)] for r in range(4)]
    s = add_round_key(s, rk[40:44])
    for rnd in range(9, 0, -1):
        s = inv_shift_rows(s)
        s = inv_sub_bytes(s)
        s = add_round_key(s, rk[rnd*4:rnd*4+4])
        s = inv_mix_columns(s)
    s = inv_shift_rows(s)
    s = inv_sub_bytes(s)
    s = add_round_key(s, rk[0:4])
    return [s[r][c] for c in range(4) for r in range(4)]

# === Demo ===
key = [0x2b, 0x7e, 0x15, 0x16,
       0x28, 0xae, 0xd2, 0xa6,
       0xab, 0xf7, 0x15, 0x88,
       0x09, 0xcf, 0x4f, 0x3c]

rk = key_expansion_aes128(key)


plaintext_str = "Encrypt me plz!!"
plaintext = list(plaintext_str.encode("utf-8"))  # convert to list of bytes

cipher = encrypt_block(plaintext, rk)
plain = decrypt_block(cipher, rk)

print("Plaintext :", bytes(plaintext).decode("utf-8"))
print("Encrypted :", bytes(cipher).hex())
print("Decrypted :", bytes(plain).decode("utf-8"))
